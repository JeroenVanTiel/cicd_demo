name: Azure Bicep CI/CD

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: "my-resource-group"
  LOCATION: "eastus"
  BICEP_FILE: "main.bicep"

jobs:
  # 1. Lint, Validate & Run Security Checks
  lint-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Azure CLI & Bicep
        run: |
          az version
          az bicep version || az bicep install

      - name: Validate Bicep
        run: az bicep build --file $BICEP_FILE

      - name: Run Security Scan (Checkov)
        run: |
          pip install checkov
          checkov -d . --framework azure

      - name: Run PSRule (Best Practices Check)
        uses: Microsoft/ps-rule@v2
        with:
          modules: 'PSRule.Rules.Azure'
          inputPath: $BICEP_FILE
          outputFormat: 'JUnit' 
          outputPath: './reports/psrule-results.xml'

      - name: Upload PSRule Test Results
        uses: actions/upload-artifact@v3
        with:
          name: psrule-results
          path: ./reports/psrule-results.xml

  # 2. What-If Analysis for Staging
  what-if-staging:
    runs-on: ubuntu-latest
    needs: lint-validate
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: What-If Analysis (Staging)
        run: |
          az deployment group what-if --resource-group $RESOURCE_GROUP --template-file $BICEP_FILE

  # 3. Deploy to Staging (Auto-Approved)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: what-if-staging
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Staging
        run: |
          az deployment group create --resource-group $RESOURCE_GROUP --template-file $BICEP_FILE --parameters environment=staging

  # 4. Run Pester Tests After Staging Deployment
  test-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Pester Tests (Infrastructure Validation)
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          Invoke-Pester -Path ./tests/staging-tests.ps1 -OutputFile ./reports/staging-pester.xml -OutputFormat NUnitXml

      - name: Upload Pester Test Results (Staging)
        uses: actions/upload-artifact@v3
        with:
          name: staging-pester-results
          path: ./reports/staging-pester.xml

  # 5. What-If Analysis for Production
  what-if-production:
    runs-on: ubuntu-latest
    needs: lint-validate
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: What-If Analysis (Production)
        run: |
          az deployment group what-if --resource-group $RESOURCE_GROUP --template-file $BICEP_FILE

  # 6. Request Manual Approval for Production Deployment
  request-production-approval:
    runs-on: ubuntu-latest
    needs: what-if-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Request Manual Approval
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          review-message: "Please approve production deployment."

  # 7. Deploy to Production (After Approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: request-production-approval
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Production
        run: |
          az deployment group create --resource-group $RESOURCE_GROUP --template-file $BICEP_FILE --parameters environment=production

  # 8. Run Pester Tests After Production Deployment
  test-production:
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Pester Tests (Infrastructure Validation)
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          Invoke-Pester -Path ./tests/production-tests.ps1 -OutputFile ./reports/production-pester.xml -OutputFormat NUnitXml

      - name: Upload Pester Test Results (Production)
        uses: actions/upload-artifact@v3
        with:
          name: production-pester-results
          path: ./reports/production-pester.xml
